//
//  DiceStyleKit.swift
//  DiceGame
//
//  Created by  on 4/1/16.
//  Copyright (c) 2016 . All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class DiceStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let blueDie: UIColor = UIColor(red: 0.230, green: 0.480, blue: 0.858, alpha: 1.000)
        static let greenDie: UIColor = UIColor(red: 0.320, green: 0.800, blue: 0.616, alpha: 1.000)
        static let redDie: UIColor = UIColor(red: 0.792, green: 0.216, blue: 0.216, alpha: 1.000)
        static let gameOver: UIColor = UIColor(red: 0.678, green: 0.192, blue: 0.192, alpha: 1.000)
        static let rollColor: UIColor = UIColor(red: 0.000, green: 0.133, blue: 0.282, alpha: 1.000)
    }

    //// Colors

    public class var blueDie: UIColor { return Cache.blueDie }
    public class var greenDie: UIColor { return Cache.greenDie }
    public class var redDie: UIColor { return Cache.redDie }
    public class var gameOver: UIColor { return Cache.gameOver }
    public class var rollColor: UIColor { return Cache.rollColor }

    //// Drawing Methods

    public class func drawDie(diceColor diceColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000), dots: CGFloat = 6) {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let diceFill = diceColor.colorWithSaturation(0.2)

        //// Variable Declarations
        let expression = dots != 1
        let expression2 = dots != 1 && dots != 3 && dots != 2
        let expression3 = dots == 1 || dots == 3 || dots == 5
        let expression4 = dots == 6

        //// Page-1
        //// 5
        //// Rectangle-1 Drawing
        let rectangle1Path = UIBezierPath(roundedRect: CGRect(x: 1, y: 1, width: 104, height: 104), cornerRadius: 8)
        fillColor.setFill()
        rectangle1Path.fill()
        diceColor.setStroke()
        rectangle1Path.lineWidth = 1
        rectangle1Path.stroke()


        //// Circle 2
        if (expression) {
            //// Oval- 3 Drawing
            let oval3Path = UIBezierPath(ovalInRect: CGRect(x: 20, y: 20, width: 14, height: 14))
            diceFill.setFill()
            oval3Path.fill()
            diceColor.setStroke()
            oval3Path.lineWidth = 1
            oval3Path.stroke()
        }




        //// Circle 3
        if (expression) {
            //// Oval- 5 Drawing
            let oval5Path = UIBezierPath(ovalInRect: CGRect(x: 72, y: 72, width: 14, height: 14))
            diceFill.setFill()
            oval5Path.fill()
            diceColor.setStroke()
            oval5Path.lineWidth = 1
            oval5Path.stroke()
        }




        //// Circle 4
        if (expression2) {
            //// Oval- 7 Drawing
            let oval7Path = UIBezierPath(ovalInRect: CGRect(x: 72, y: 20, width: 14, height: 14))
            diceFill.setFill()
            oval7Path.fill()
            diceColor.setStroke()
            oval7Path.lineWidth = 1
            oval7Path.stroke()
        }




        if (expression2) {
            //// Oval- 9 Drawing
            let oval9Path = UIBezierPath(ovalInRect: CGRect(x: 20, y: 72, width: 14, height: 14))
            diceFill.setFill()
            oval9Path.fill()
            diceColor.setStroke()
            oval9Path.lineWidth = 1
            oval9Path.stroke()
        }


        //// Circle
        if (expression3) {
            //// Oval-1 Drawing
            let oval1Path = UIBezierPath(ovalInRect: CGRect(x: 46, y: 46, width: 14, height: 14))
            diceFill.setFill()
            oval1Path.fill()
            diceColor.setStroke()
            oval1Path.lineWidth = 1
            oval1Path.stroke()
        }




        if (expression4) {
            //// Oval- Drawing
            let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 20, y: 46, width: 14, height: 14))
            diceFill.setFill()
            ovalPath.fill()
            diceColor.setStroke()
            ovalPath.lineWidth = 1
            ovalPath.stroke()


            //// Oval- 2 Drawing
            let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 72, y: 46, width: 14, height: 14))
            diceFill.setFill()
            oval2Path.fill()
            diceColor.setStroke()
            oval2Path.lineWidth = 1
            oval2Path.stroke()
        }
    }

    //// Generated Images

    public class func imageOfDie(diceColor diceColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000), dots: CGFloat = 6) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 106, height: 106), false, 0)
            DiceStyleKit.drawDie(diceColor: diceColor, dots: dots)

        let imageOfDie = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfDie
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
